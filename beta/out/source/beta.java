/* autogenerated by Processing revision 1283 on 2022-06-07 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.ArrayList;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class beta extends PApplet {

Page currentPage;
Button settings;

 public void setup() {
    //load the words
    String[] words = loadStrings("default.txt");
    for ( String word : words ) WordGenerator.addWord( word );
    /* size commented out by preprocessor */;
    
    //other stuff
    surface.setTitle("BongoCatType");
    surface.setResizable(true);
    frameRate(60);
    toggleTheme();
    
    //set the current page to home
    currentPage = new Home();
    currentPage.setup();

    //create settings button
    settings = new Button(width/2, height/2, 20, "*", 30, 30, new Settings());
}

 public void draw(){
  // background stuff
  background(255,192,203);

  //current page stuff
  //currentPage.setup(); //to detect for resize
  currentPage.process();
  currentPage.draw();

  //settings button
  //settings.process();
  //settings.draw();

}

//for theme switchings
int STANDARD;
int HOVER;
int OUTLINE;
int TEXTCOLOR;
boolean darkMode = false;
 public void toggleTheme(){
  if( darkMode ){
  }
  else{
    STANDARD = 0xFFFFFFFF;
    HOVER = 0xFFA8A8A8;
    OUTLINE = 0xFF000000;
    TEXTCOLOR = 0xFF000000;
  }
}



class Element{
  float x, y;
  Element(float x, float y){this.x = x; this.y = y;}
   public void draw(){};
   public void process(){};
}

//for text elements
class Label extends Element{
  String text;
  float size;
  Label(float x, float y, float size, String text){
    super(x,y);
    this.size = size; this.text = text;
  }
   public void draw(){
    super.draw();
    textAlign(CENTER);
    fill(TEXTCOLOR);
    textSize(size);
    text( text, x, y);
  }
}

//for interactable buttons that take you to other pages
class Button extends Label{
  int current;
  float w, h;
  Page nextPage;
  Button(float x, float y, float size, String text, float w, float h, Page next){
    super(x, y, size, text);
    this.w = w; this.h = h;
    this.text = text; nextPage = next;
    current = STANDARD;
  }
  //check mouse position and if mouse was clicked, act accordingly
   public void process(){
    super.process();
    boolean onButton = mouseX > x-w/2 && mouseX < x+w/2 && mouseY > y-h/2 && mouseY < y+h/2;
    //color is standard
    if( !onButton ) current = STANDARD;
    //if there is nextPage, go to it. Else print no connection
    else if( mousePressed ) onClick();
    //mouse is hovering over button
    else current = HOVER;
  }
  //what happens when clicked
   public void onClick(){ 
    if( nextPage == null ) println("NO PAGE CONNECTED"); 
    else{
      currentPage = nextPage; 
      currentPage.setup(); 
      mousePressed = false;
    }
  }
   public void draw(){
    rectMode(CENTER);
    //make outline first
    fill(OUTLINE);
    rect( x, y, w, h);
    //then make inside
    fill(current);
    rect( x, y, w-4, h-4);
    //render the label
    super.draw();
  }
}

//for animations
class Animation extends Element{
  PImage[] frames;
  int currentFrame;
  Animation( float x, float y, PImage[] frames ){
    super(x, y);
    this.frames = frames;
    currentFrame = 0;
  }
   public void process(){
    super.process();
    currentFrame = (frameCount%60)/(60/frames.length);
  }
   public void draw(){
    super.draw();
    image( frames[currentFrame], x, y );
  }
}

//for textboxes with a fixed width
class TextBox extends Label{
  int width;
  TextBox( float x, float y, float size, String text, int width){
    super( x, y, size, text);
    //add newlines to the text according to width guidlines
    String result = "";
    String current = "";
    for( char c : text.toCharArray() ){
      if( textWidth(current) > width ){result += current + "\n"; current = "";}
      current += c;
    }
    result += current;
    super.text = result;
  }
}

//for user input
class InputBox extends Button{
  boolean selected;
  InputBox(float x, float y, float size, String text, float w, float h){
    super(x, y, size, text, w, h, null);
    selected = false;
  }
  //process
   public void process(){
    super.process();
    if( selected ){
      if( keyPressed ){
        if( key == ENTER ) selected = false;
        else if (key == BACKSPACE && !super.text.equals("")) super.text = super.text.substring(0, super.text.length()-1 );
        else if ( Character.isLetterOrDigit(key) ) super.text += key;
        keyPressed = false;
      }
    } 
  }
  //override the onClick
   public void onClick(){
    super.text = "";
    selected = true;
  }
}


class Page {
  ArrayList<Element> elements;
  Page(){
    elements = new ArrayList<Element>();
  }
   public void setup(){}
   public void process(){
    for( Element e: elements ) e.process();
  }
   public void draw(){
    for( Element e: elements ) e.draw();
  }
}

class Home extends Page {
   public void setup(){
    //BONGOCAT ANIMATION
    elements.add(
      new Animation(width/2-290, height/2+10,
        new PImage[]{ loadImage("handsup.png"), loadImage("handsdown.png") }
      )
    );
    //TITLE LABEL
    elements.add( 
      new Label( width/2, height/2-225, 100, "BongoCatType" )
    );
    //ABOUT PAGE BUTTON
    elements.add(
      new Button( width/2, height/2-25, 15, "About", 100, 30, new About() )
    );
    //GAME PAGE BUTTON
    elements.add(
      new Button( width/2, height/2-75, 15, "Play", 100, 30, new Game() )
    );
  }
}

class Game extends Page {
  GameManager manager;
  Game(){
    super();
    manager = new GameManager();  
  }
   public void setup(){
    //TITLE
    elements.add(
      new Label( width/2, height/2-225, 100, "Game")
    );
    //RETURN HOME
    elements.add(
      new Button( width/2, height/2+300, 15, "Exit", 100, 30, new Home() )
    );
    //INPUT BOX
    elements.add(
      new InputBox( width/2, height/2, 15, "Input a Value", 100, 30)
    );
  }
}

class About extends Page {
   public void setup(){
    
    //ABOUT PAGE HEADER
    elements.add( 
      new Label( width/2, height/2-250, 75, "About Page" )
    );

    //ABOUT PAGE INFORMATION
    elements.add(
      new TextBox( width/2, height/2-150, 25, "BongoCatType took heavy inspiration from another program\n called MonkeyType. Although MonkeyType is a very cool app, we feel like it needed some improvements. Thats why we spent the last few years developing BongoCatType, the best typing\n experience the world has seen so far.\n - Faiyaz, Salaj, Alif", 400 )
    );

    //HOME PAGE BUTTON
    elements.add(
      new Button( width/2, height/2+125, 15, "Home", 100, 30, new Home() )
    );

  }
}

class Settings extends Page{
   public void setup(){
    elements.add(
      new Label(width/2, 100, 100, "Settings")
    );
  }
}


  public void settings() { size(1000, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "beta" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
